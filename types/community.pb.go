// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nft/v1beta1/community.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Community struct {
	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id          string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Creator     string   `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Description string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	PreviewURI  string   `protobuf:"bytes,5,opt,name=preview_uri,json=previewUri,proto3" json:"preview_uri,omitempty" yaml:"preview_uri"`
	Data        string   `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Tags        []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (m *Community) Reset()         { *m = Community{} }
func (m *Community) String() string { return proto.CompactTextString(m) }
func (*Community) ProtoMessage()    {}
func (*Community) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b0374c32d60567f, []int{0}
}
func (m *Community) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Community) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Community.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Community) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Community.Merge(m, src)
}
func (m *Community) XXX_Size() int {
	return m.Size()
}
func (m *Community) XXX_DiscardUnknown() {
	xxx_messageInfo_Community.DiscardUnknown(m)
}

var xxx_messageInfo_Community proto.InternalMessageInfo

type CommunityMembers struct {
	CommunityId string   `protobuf:"bytes,1,opt,name=community_id,json=communityId,proto3" json:"community_id,omitempty"`
	Addresses   []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *CommunityMembers) Reset()         { *m = CommunityMembers{} }
func (m *CommunityMembers) String() string { return proto.CompactTextString(m) }
func (*CommunityMembers) ProtoMessage()    {}
func (*CommunityMembers) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b0374c32d60567f, []int{1}
}
func (m *CommunityMembers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunityMembers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunityMembers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunityMembers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityMembers.Merge(m, src)
}
func (m *CommunityMembers) XXX_Size() int {
	return m.Size()
}
func (m *CommunityMembers) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityMembers.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityMembers proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Community)(nil), "nft.v1beta1.Community")
	proto.RegisterType((*CommunityMembers)(nil), "nft.v1beta1.CommunityMembers")
}

func init() { proto.RegisterFile("nft/v1beta1/community.proto", fileDescriptor_1b0374c32d60567f) }

var fileDescriptor_1b0374c32d60567f = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x3f, 0x6f, 0xe2, 0x30,
	0x18, 0xc6, 0x93, 0xc0, 0x81, 0x70, 0x4e, 0xa7, 0x93, 0x75, 0x83, 0xc5, 0x9d, 0x02, 0x17, 0x31,
	0xdc, 0x44, 0x84, 0x6e, 0xeb, 0x56, 0xaa, 0x0e, 0x0c, 0xad, 0x2a, 0x2a, 0x96, 0x2e, 0xc8, 0x89,
	0x4d, 0x6a, 0x15, 0xc7, 0x91, 0xed, 0x80, 0xf2, 0x2d, 0xfa, 0xb1, 0x18, 0x19, 0xab, 0x0e, 0xa8,
	0x0d, 0xdf, 0xa0, 0x9f, 0xa0, 0xb2, 0x03, 0x94, 0xed, 0x79, 0x7e, 0xef, 0xa3, 0x57, 0xef, 0x1f,
	0xf0, 0x3b, 0x5b, 0xe8, 0x68, 0x35, 0x8a, 0xa9, 0xc6, 0xa3, 0x28, 0x11, 0x9c, 0x17, 0x19, 0xd3,
	0xe5, 0x30, 0x97, 0x42, 0x0b, 0xe8, 0x67, 0x0b, 0x3d, 0x3c, 0x14, 0xbb, 0xbf, 0x52, 0x91, 0x0a,
	0xcb, 0x23, 0xa3, 0xea, 0x48, 0xb7, 0x97, 0x0a, 0x91, 0x2e, 0x69, 0x64, 0x5d, 0x5c, 0x2c, 0x22,
	0xcd, 0x38, 0x55, 0x1a, 0xf3, 0xbc, 0x0e, 0x84, 0xaf, 0x2e, 0xe8, 0x5c, 0x1d, 0xfb, 0x42, 0x08,
	0x9a, 0x19, 0xe6, 0x14, 0xb9, 0x7d, 0xf7, 0x5f, 0x67, 0x6a, 0x35, 0xfc, 0x01, 0x3c, 0x46, 0x90,
	0x67, 0x89, 0xc7, 0x08, 0x44, 0xa0, 0x9d, 0x48, 0x8a, 0xb5, 0x90, 0xa8, 0x61, 0xe1, 0xd1, 0xc2,
	0x3e, 0xf0, 0x09, 0x55, 0x89, 0x64, 0xb9, 0x66, 0x22, 0x43, 0x4d, 0x5b, 0x3d, 0x47, 0xf0, 0x1a,
	0xf8, 0xb9, 0xa4, 0x2b, 0x46, 0xd7, 0xf3, 0x42, 0x32, 0xf4, 0xcd, 0x24, 0xc6, 0x83, 0x6a, 0xd7,
	0x03, 0x77, 0x35, 0x9e, 0x4d, 0x27, 0x1f, 0xbb, 0x1e, 0x2c, 0x31, 0x5f, 0x5e, 0x84, 0x67, 0xd1,
	0x70, 0x0a, 0x0e, 0x6e, 0x26, 0x99, 0x19, 0x93, 0x60, 0x8d, 0x51, 0xab, 0x1e, 0xd3, 0x68, 0xc3,
	0x34, 0x4e, 0x15, 0x6a, 0xf7, 0x1b, 0x86, 0x19, 0x1d, 0xde, 0x83, 0x9f, 0xa7, 0xdd, 0x6e, 0x28,
	0x8f, 0xa9, 0x54, 0xf0, 0x2f, 0xf8, 0x7e, 0xba, 0xe3, 0x9c, 0x91, 0xc3, 0xaa, 0xfe, 0x89, 0x4d,
	0x08, 0xfc, 0x03, 0x3a, 0x98, 0x10, 0x49, 0x95, 0xa2, 0x0a, 0x79, 0xb6, 0xdf, 0x17, 0x18, 0x8f,
	0x37, 0xef, 0x81, 0xb3, 0xa9, 0x02, 0x77, 0x5b, 0x05, 0xee, 0x5b, 0x15, 0xb8, 0xcf, 0xfb, 0xc0,
	0xd9, 0xee, 0x03, 0xe7, 0x65, 0x1f, 0x38, 0x0f, 0x83, 0x94, 0xe9, 0xc7, 0x22, 0x1e, 0x26, 0x82,
	0x47, 0x97, 0x85, 0x16, 0x99, 0xe0, 0xe5, 0x2d, 0xd5, 0x6b, 0x21, 0x9f, 0x22, 0xf3, 0x4b, 0x5d,
	0xe6, 0x54, 0xc5, 0x2d, 0x7b, 0xfc, 0xff, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x57, 0xb5, 0x18,
	0xd0, 0xdf, 0x01, 0x00, 0x00,
}

func (m *Community) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Community) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Community) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintCommunity(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PreviewURI) > 0 {
		i -= len(m.PreviewURI)
		copy(dAtA[i:], m.PreviewURI)
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.PreviewURI)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommunityMembers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunityMembers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunityMembers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintCommunity(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CommunityId) > 0 {
		i -= len(m.CommunityId)
		copy(dAtA[i:], m.CommunityId)
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.CommunityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommunity(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommunity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Community) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	l = len(m.PreviewURI)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	return n
}

func (m *CommunityMembers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommunityId)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	return n
}

func sovCommunity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommunity(x uint64) (n int) {
	return sovCommunity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Community) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Community: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Community: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviewURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviewURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommunityMembers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunityMembers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunityMembers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommunityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommunity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommunity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommunity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommunity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommunity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommunity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommunity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommunity = fmt.Errorf("proto: unexpected end of group")
)
